'scopeName': 'source.enc'
'fileTypes': [
  'enc'
]
'name': 'Encore'
'firstLineMatch': '^#!/.*\\b\\w*encore\\b'
'foldingStartMarker': '\\{\\s*$'
'foldingStopMarker': '^\\s*\\}'
'patterns' : [
  {
    'include': '#code'
  }
]
'repository' :
  'code':
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'include': '#embed'
      }
      {
        'include': '#types'
      }
      {
        'include': '#declarations'
      }
      {
        'include': '#inheritance'
      }
      {
        'include': '#imports'
      }
      {
        'include': '#strings'
      }
      {
        'include': '#initialization'
      }
      {
        'include': '#keywords'
      }
      {
        'include': '#constants'
      }
      {
        'include': '#char-literal'
      }
      {
        'include': '#parameter-list'
      }
      {
        'include': '#qualifiedClassName'
      }
      {
        'include': '#meta-brackets'
      }
      {
        'include': '#meta-colons'
      }
    ]
  'comments':
    'patterns': [
      {
        'begin': '\\{-'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.enc'
        'end': '-\\}'
        'name': 'comment.block.enc'
        'patterns': [
          {
            'captures':
              '0':
                'name': 'keyword.other.todo'
            'match': '(?:TODO|XXX):?'
          }
        ]
      }
      {
        'comment': 'Line comments'
        'begin': '--'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.enc'
        'end': '$'
        'name': 'comment.line.double-dash.enc'
        'patterns': [
          {
            'captures':
              '0':
                'name': 'keyword.other.todo'
            'match': '(?:TODO|XXX):?'
          }
        ]
      }
      {
        'comment': 'Environment instruction'
        'match': '^#!.*$'
        'name': 'comment.line.env.enc'
      }
    ]
  'embed':
    'patterns': [
      {
        'begin': '\\b(embed)\\s+([_$a-zA-Z][_$a-zA-Z0-9]*)\\b'
        'beginCaptures':
          '0':
            'name': 'keyword.embed.enc'
          '1':
            'name': 'storage.type.enc' # TODO: It would be better if it used the type patterns...
        'end': '\\b(end)\\b'
        'endCaptures':
          '0':
            'name': 'keyword.end.enc'
        'name': 'code.embedded-c.enc'
        'patterns': [
          {
            'include': 'source.c'
          }
        ]
      }
      {
        'begin': '\\b(embed)\\b'
        'beginCaptures':
          '0':
            'name': 'keyword.embed.enc'
        'end': '\\b(end)\\b'
        'endCaptures':
          '0':
            'name': 'keyword.end.enc'
        'name': 'code.embedded-c.enc'
        'patterns': [
          {
            'include': 'source.c'
          }
          {
            'match': '\\b(body)\\b'
            'name': 'keyword.body.enc'
          }
        ]
      }
    ]
  'types':
    'patterns': [
      {
        'comment': 'Storage types'
        'match': '\\b(bool|char|real|int|uint|String|void)\\b'
        'name': 'storage.type.enc'
      }
    ]
  'declarations':
    'patterns': [
     {
       'captures':
         '1':
           'name': 'keyword.declaration.enc'
         '2':
           'name': 'entity.name.function.declaration'
       'match': '(?x)\\b(def)\\s+([_$a-zA-Z][_$a-zA-Z0-9]*(?:_[^\\s])(?=[(\\t ])|[_$a-zA-Z][_$a-zA-Z0-9]*)'
     }
     {
       'captures':
         '1':
           'name': 'keyword.require.enc'
         '2':
           'name': 'entity.name.val.declaration.require'
         '3':
           'name': 'entity.name.function.declaration.require'
       'match': '\\b(require)\\s+(?:([_$a-zA-Z][_$a-zA-Z0-9]*)(?=\\s*:)|([_$a-zA-Z][_$a-zA-Z0-9]*)(?=\\s*\\())'
     }
     {
       'captures':
         '1':
           'name': 'storage.modifier.passive.enc'
         '2':
           'name': 'storage.type.enc'
         '3':
           'name': 'entity.name.class.declaration'
       'match': '\\b(passive\\s+)?(class|trait)\\s+([^\\s\\{<]+)'
     }
     {
       'captures':
         '1':
           'name': 'keyword.bundle.enc'
         '2':
           'name': 'variable.bundle.enc' # XXX: For consistent colours.
         '3':
           'name': 'keyword.where.enc'
       'match': '\\b(bundle)\\s+([\\w\\.]+)\\s+(where)\\b'
       'name': 'meta.bundle.enc'
     }
    ]
  'inheritance': # TODO: Check if this is valid.
    'patterns': [
      {
        'captures':
          '1':
            'name': 'storage.type.enc'
          '2':
            'name': 'entity.other.inherited-class.enc'
        'match': 'class .*(?:<.*>)?\\s+(:)\\s+([^\\s\\{\\(\\[\\]]+)'
      }
    ]
  'imports':
    'begin': '\\b(import)\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.import.enc'
    'end': '([\\n;]+)'
    'name': 'meta.import.enc'
    'patterns': [
      {
        'include': '#comments'
      }
      {
        'match': '([^\\s{;.]+)\\s*\\.\\s*'
        'name': 'variable.bundle.enc'
      }
      {
        'match': '([^\\s{;.]+)'
        'name': 'variable.bundle.enc'
      }
    ]
  'strings':
    'patterns': [
      {
        'begin': '"'
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.string.begin.enc'
        'end': '"'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.string.end.enc'
        'name': 'string.quoted.double.enc'
        'patterns': [
          {
            'match': '\\\\(?:[btnfr\\\\"\']|[0-7]{1,3}|u[0-9A-Fa-f]{4})'
            'name': 'constant.character.escape.enc'
          }
          {
            'match': '\\\\.'
            'name': 'invalid.illegal.unrecognized-string-escape.enc'
          }
        ]
      }
    ]
  'initialization':
    'captures':
      '1':
        'name': 'keyword.new.enc'
      '2':
        'name': 'entity.name.class'
    'match': '\\b(new)\\s+([A-Z]\\w*)'
  'keywords':
    'patterns': [
      {
        'match': '\\b(return)\\b'
        'name': 'keyword.control.flow.jump.enc'
      }
      {
        'match': '\\b(else|if|unless|then|while|repeat|match|with|when|foreach|in)\\b'
        'name': 'keyword.control.flow.enc'
      }
      {
        'match': '\\b(get|await)\\b'
        'name': 'keyword.futures.enc'
      }
      {
        'match': '(~~>|!)'
        'name': 'keyword.operator.futures.enc'
      }
      {
        'match': '\\b(async|finish|suspend)\\b'
        'name': 'keyword.task.enc'
      }
      {
        'match': '\\b(liftv|liftf|join|extract)\\b'
        'name': 'keyword.combinators.enc'
      }
      {
        'match': '(\\|\\||>>)'
        'name': 'keyword.operator.future.enc'
      }
      {
        'match': '\\b(let|in)\\b'
        'name': 'keyword.declaration.enc'
      }
      {
        'match': '(==|!=|<=|>=|<|>)'
        'name': 'keyword.operator.comparison.enc'
      }
      {
        'match': '(\\-|\\+|\\*|%)'
        'name': 'keyword.operator.arithmetic.enc'
      }
      {
        'match': '(not|and|or)'
        'name': 'keyword.operator.logical.enc'
      }
    ]
  'constants':
    'patterns': [
      {
        'match': '\\b(false|null|true|\\(\\)|Nothing)\\b'
        'name': 'constant.language.enc'
      }
      {
        'comment': 'Floating-point literals'
        'match': '(\\.\\d+([Ee][\-\+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][\-\+]\\d+)?i?\\b)?'
        'name': 'constant.numeric.floating-point.enc'
      }
      {
        'comment': 'Integers'
        'match': '\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][\-\+]\\d+i?))\\b'
        'name': 'constant.numeric.integer.enc'
      }
      {
        'match': '\\b(this)\\b'
        'name': 'variable.language.enc'
      }
      {
        'match': '\\b(String|Maybe)\\b'
        'name': 'storage.type.enc'
      }
      {
        'match': '\\b(print)\\b'
        'name': 'support.function.enc'
      }
    ]
  'char-literal':
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.character.begin.enc'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.character.end.enc'
    'name': 'constant.character.literal.enc'
    'patterns': [
      {
        'match': '\\\\(?:[btnfr\\\\"\']|[0-7]{1,3}|u[0-9A-Fa-f]{4})'
        'name': 'constant.character.escape.enc'
      }
      {
        'match': '\\\\.'
        'name': 'invalid.illegal.unrecognized-character-escape.enc'
      }
      {
        'match': '[^\']{2,}'
        'name': 'invalid.illegal.character-literal-too-long'
      }
      {
        'match': '(?<!\')[^\']'
        'name': 'invalid.illegal.character-literal-too-long'
      }
    ]
  'parameter-list':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'variable.parameter.enc'
          '2':
            'name': 'meta.colon.enc'
        'comment': 'We do not match param names that start with a Capital'
        'match': '(?<=[^\\._$a-zA-Z0-9])(`[^`]+`|[_$a-z][_$a-zA-Z0-9]*(?:_[^\\s])(?=[\\t ])|[_$a-z][_$a-zA-Z0-9]*)\\s*(:)\\s+'
      }
    ]
  'qualifiedClassName':
    'captures':
      '1':
        'name': 'entity.name.class'
    'match': '(\\b([A-Z][\\w]*))'
  'meta-brackets':
    'comment': 'For themes: Brackets look nice when colored.'
    'patterns': [
      {
        'match': '{|}|\\(|\\)'
        'name': 'meta.bracket.enc'
      }
    ]
  'meta-colons':
    'comment': 'For themes: Matching type colons'
    'patterns': [
      {
        'match': '(?<!:):(?!:)'
        'name': 'meta.colon.enc'
      }
    ]
